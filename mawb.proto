
package mawb;

message InputDisp {
    optional string id = 1;
    optional int32 output = 2;
}

message FluidSynthDisp {
    optional string id = 1;
    optional string sound_font = 2;
}

message Config {
    repeated InputDisp input_disp = 1;
    repeated FluidSynthDisp fluid_disp = 2;
}

enum SequencerState {
    // No tracks are being played.
    IDLE = 0;

    // Recorded tracks are being played.
    PLAY = 1;

    // The sequencer will begin recording on all inputs as soon as an
    // event is received from any of them.
    LATCHED_RECORD = 2;

    // The sequencer is recording events on all inputs.
    RECORD = 3;
}

message DispatcherInfo {
    optional string name = 1;

    // An event sequence to establish the initial state of the sequencer.
    optional bytes initial_state = 2;
}

message Project {
    repeated Section section = 1;
    repeated DispatcherInfo dispatchers = 2;
}

message Section {
    optional string name = 1;
    repeated PBTrack track = 2;

    // The end position of the section in frames.  This should generally be
    // the end position of the longest frame.
    optional int32 end = 3;

    // The set of waves associated with the section.
    repeated Wave waves = 4;
}

message PBTrack {
    optional string name = 1;
    optional bytes events = 2;
}

// This is the all-purpose response message for all of the
message Response {
    // The original message id that this is a response to.
    optional int32 msg_id = 1;

    // The complete project object.
    optional Project project = 2;
}

// Load a complete project state from a file into the daemon.
message LoadState {

    // Name of a file to load the state from.
    optional string filename = 2;
}

// Sets the initial state of an event dispatcher.
// The initial state is a set of midi events that are sent to the event
// dispatcher at the time when this message is sent and when the timer is set
// to zero.
message SetInitialState {
    // The name of the dispatcher.
    optional string dispatcher = 1;

    // A midi track containing the events.
    optional bytes events = 2;
}

// Set the parameters of the input dispatcher.
message SetInputParams {

    // The channel to convert all events to.
    optional int32 output_channel = 1;
}

// A "wave" is a reference to a wave-file and some meta-data to indicate how
// the audio in that file is to be played back.
message Wave {

    // True if the wave is enabled.
    optional bool enabled = 1 [default = true];

    // The end position of the buffer in frames.
    optional int32 end = 2;

    // The loop position.  See "Channel" in jackengine.cc.
    optional int32 loopPos = 3 [default = 0];

    // The start offset of the track.
    optional int32 offset = 4 [default = 0];

    // The buffer data, stored as interlaced 16-bit signed big-endian values.
    optional bytes data = 5;
}

// A stored project file.
message ProjectFile {
    repeated Section section = 1;

    // Index of the current section.
    optional int32 sectionIndex = 2 [default = 0];
}

message RPC {

    // A message identifier.  If this is present, a Response message will be
    // sent back with the same message id.  Otherwise, no response will be
    // returned.
    optional int32 msg_id = 1;

    // Begin Recording. - create a record track, add it to an input.

    // Test function.  Echoes the text to the console.
    repeated string echo = 2;

    // Change the sequencer state to that requested.
    optional SequencerState change_sequencer_state = 3;

    // Set the clock time.
    repeated uint32 set_ticks = 4;

    // Store the current state in the specified file.
    optional string save_state = 5;

    // Load the current state from the specified file.
    optional LoadState load_state = 6;

    // Add a new track to the current section of the project.
    optional PBTrack add_track = 7;

    // Set the initial state of an event dispatcher.
    repeated SetInitialState set_initial_state = 8;

    optional SetInputParams set_input_params = 9;
}
